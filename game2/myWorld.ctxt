#BlueJ class context
comment0.target=myWorld
comment0.text=\n\ Write\ a\ description\ of\ class\ myWorld\ here.\n\ \n\ @author\ (your\ name)\ \n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=
comment1.target=myWorld()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ myWorld.\n\ \n
comment10.params=truck
comment10.target=void\ removeTransport(Transport)
comment11.params=
comment11.target=void\ setCargo()
comment12.params=
comment12.target=void\ setEmpty()
comment13.params=emptyGrid\ grid
comment13.target=void\ setEmpty(EmptyCargo[],\ Cargo[])
comment14.params=containers
comment14.target=void\ shuffleTransportOrder(java.util.List)
comment15.params=grid
comment15.target=int\ getTilt(Cargo[])
comment16.params=grid\ x
comment16.target=int\ getWeightPerX(Cargo[],\ int)
comment17.params=grid\ x
comment17.target=int\ getCargoPerX(Cargo[],\ int)
comment18.params=x\ y
comment18.target=int\ getSizeGrid(int,\ int)
comment19.params=x\ y
comment19.target=void\ createGrid(int,\ int)
comment2.params=
comment2.target=void\ prepare()
comment2.text=\n\ Prepare\ the\ world\ for\ the\ start\ of\ the\ program.\n\ That\ is\:\ create\ the\ initial\ objects\ and\ add\ them\ to\ the\ world.\n
comment20.params=cargo\ emptySpot
comment20.target=boolean\ putCargoAtSpot(Cargo,\ EmptyCargo)
comment20.text=\ \ \ \ \ \ \ \ \n\ \ \ public\ void\ removeCargo(char\ Cargo){\n\ \ \ \ \ \ \ \ //removeObject(Cargo);\n\ \ \ \ \ \ \ \ //setGrid(i,0);\n\ \ \ \ }\n\n\ \ \ \ public\ int\ getSpot(int\ x,\ int\ y){\n\ \ \ \ \ \ \ \ int\ spot\ \=\ (x*maxHeight)+y;\n\ \ \ \ \ \ \ \ return\ p1_grid[spot].getWeight();\n\ \ \ \ }\n\ \ \ \ \ \ \ \ \n\ \ \ \ public\ int\ getCoordX(int\ spot){\n\ \ \ \ \ \ \ \ int\ x\ \=\ spot%maxWidth;\n\ \ \ \ \ \ \ \ return\ x;\n\ \ \ \ }\n\ \ \ \ \ \ \ \ \n\ \ \ \ public\ int\ getCoordY(int\ spot){\n\ \ \ \ \ \ \ \ int\ x\ \=\ spot%maxWidth;\n\ \ \ \ \ \ \ \ int\ y\ \=\ (spot-x)/maxWidth;\n\ \ \ \ \ \ \ \ return\ y;\n\ \ \ \ }\n\ \ \ \ \ \ \ \ \n\ \ \ \ public\ boolean\ setCoord(int\ x,int\ y,Cargo\ value){\n\ \ \ \ \ \ \ \ int\ spot\ \=\ (x*maxHeight)+y;\n\ \ \ \ \ \ \ \ p1_grid[spot]\ \=\ value;\n\ \ \ \ \ \ \ \ return\ true;\n\ \ \ \ }\ \ \ \ \ \n\ \ \ \ \n\ \ \ \ public\ void\ setGrid(int\ spot,\ Cargo\ value){\n\ \ \ \ \ \ \ \ if(\!aiOn){\n\ \ \ \ \ \ \ \ \ \ \ \ p1_grid[spot]\ \=\ value;\n\ \ \ \ \ \ \ \ }else{\n\ \ \ \ \ \ \ \ \ \ \ \ p2_grid[spot]\ \=\ value;\n\ \ \ \ \ \ \ \ }\n\ \ \ \ }\n\ \ \ \ \n\ \ \ \ public\ Cargo\ getValue(int\ x,int\ y){\n\ \ \ \ \ \ \ \ int\ spot\ \=\ (x*maxHeight)+y;\n\ \ \ \ \ \ \ \ return\ p1_grid[spot];\n\ \ \ \ }\n
comment3.params=
comment3.target=void\ firstStep()
comment3.text=\n\ Does\ the\ run\ initialization.\ To\ prevent\ \n
comment4.params=
comment4.target=void\ startGame()
comment5.params=
comment5.target=void\ endGame()
comment6.params=
comment6.target=void\ act()
comment7.params=cargo
comment7.target=void\ liftCargo(Cargo)
comment8.params=
comment8.target=void\ set_p1_Transport()
comment9.params=
comment9.target=void\ set_p2_Transport()
numComments=21
