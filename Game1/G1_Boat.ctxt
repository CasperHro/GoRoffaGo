#BlueJ class context
comment0.target=G1_Boat
comment0.text=\n\ The\ G1_Boat\ is\ the\ base\ class\ for\ the\ boats\ in\ Game1.\ All\ default\ behaviour\n\ is\ coded\ in\ this\ class.\ Other\ properties\ of\ different\ boats\ can\ be\ set\ in\ \n\ descending\ classes.\n\ \n\ @author\ C.\ Karreman\ \n\ @version\ 1.0\n
comment1.params=
comment1.target=java.lang.String\ getCargo()
comment1.text=\n\ Return\ the\ cargo\ to\ the\ rest\ of\ the\ world,\ read\ only.\n
comment2.params=value
comment2.target=void\ setCargo(java.lang.String)
comment2.text=\n\ Sets\ the\ cargo\ and\ loads\ the\ image\ for\ that\ type\n
comment3.params=
comment3.target=void\ act()
comment3.text=\n\ Act\ -\ do\ whatever\ the\ G1_Boat\ wants\ to\ do.\ This\ method\ is\ called\ whenever\n\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\n
comment4.params=
comment4.target=void\ checkCollision()
comment4.text=\n\ When\ other\ boats\ intersect\ we\ are\ crashed\ into\ that\ boat.\ 2\ boats\ sink...\n
comment5.params=
comment5.target=boolean\ getControlled()
comment5.text=\n\ Returns\ the\ controlled\ flag.\ This\ way\ other\ objects\ can\ only\ read\ the\ value\n\ of\ the\ variable.\ This\ is\ needed\ in\ the\ world\ to\ check\ which\ boat\ handles\ user\n\ input.\n
comment6.params=
comment6.target=void\ takeControls()
comment6.text=\n\ TakeControls\ steals\ the\ user\ input\ from\ other\ boats.\ Only\ one\ boat\ can\ be\ \n\ controlled\ by\ the\ player\ so\ remove\ controls\ from\ the\ others\ bofore\ taking\n\ over\ the\ controls.\n
comment7.params=
comment7.target=void\ releaseControls()
comment7.text=\n\ Releases\ the\ user\ input.\n
comment8.params=
comment8.target=void\ crash()
comment8.text=\n\ Oh\ no,\ we\ crashed\!\!\!\ Start\ the\ crash\ animation\ ans\ begin\ sinking\ the\ boat.\n
comment9.params=
comment9.target=boolean\ getCrashed()
comment9.text=\n\ Returns\ the\ crashed\ value\ so\ the\ world\ does\ not\ assign\ user\ control.\n
numComments=10
